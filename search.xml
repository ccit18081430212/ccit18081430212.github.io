<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>读写特性</title>
      <link href="/2020/06/22/title-2/"/>
      <url>/2020/06/22/title-2/</url>
      
        <content type="html"><![CDATA[<h3 id="一，修改源码"><a href="#一，修改源码" class="headerlink" title="一，修改源码"></a>一，修改源码</h3><p><img src="D:%5Cblog%5Cccit18081430212Blog%5Csource%5Cccit18081430212%5CQQ%E5%9B%BE%E7%89%8720200622073819.png" alt=""></p><h4 id="Step2-写特性的相关代码"><a href="#Step2-写特性的相关代码" class="headerlink" title="Step2:写特性的相关代码"></a>Step2:写特性的相关代码</h4><p><img src="D:%5Cblog%5Cccit18081430212Blog%5Csource%5Cccit18081430212%5CQQ%E5%9B%BE%E7%89%8720200622073831.png" alt=""></p><p><img src="D:%5Cblog%5Cccit18081430212Blog%5Csource%5Cccit18081430212%5CQQ%E5%9B%BE%E7%89%8720200622073837.png" alt=""></p><h4 id="Step3-HTML相关代码的修改"><a href="#Step3-HTML相关代码的修改" class="headerlink" title="Step3:HTML相关代码的修改"></a>Step3:HTML相关代码的修改</h4><p><img src="D:%5Cblog%5Cccit18081430212Blog%5Csource%5Cccit18081430212%5CQQ%E5%9B%BE%E7%89%8720200622073842.png" alt=""></p><h3 id="二，代码解析"><a href="#二，代码解析" class="headerlink" title="二，代码解析"></a>二，代码解析</h3><p>1.你的蓝牙设备应该包含GATT设备信息服务，该服务至少应该包含模型名称字符串特征。我们将读取它的值并在web页面中显示结果。函数readModelNumber() 就是读特性所调用的函数。只有当我们成功连接到一个设备时，才能执行读取和写入特征值。在进行读或写操作之前，我们还需要知道所连接的设备包含所需的服务和特性。因此，服务发现也必须完成。因此，在readModelNumberl()和randomLEDs()函数开始时，我们将在开始时执行一些简单的防御性验证，以检查我们已经达到了所需的状态，以下代码就是防御性验证:</p><p><img src="D:%5Cblog%5Cccit18081430212Blog%5Csource%5Cccit18081430212%5CQQ%E5%9B%BE%E7%89%8720200622073846.png" alt=""></p><p>2.完成防御性验证，我们就开始读值，然后将其打印出来。Uint8Array是8 位无符号整数值的类型化数组，将读到的值赋给data。TextDecoder接口表示用于特定文本编码的解码器，例如 UTF-8,ISO-8859-2，KOI8-R等。</p><p><img src="D:%5Cblog%5Cccit18081430212Blog%5Csource%5Cccit18081430212%5CQQ%E5%9B%BE%E7%89%872020062207436666.png" alt=""></p><p>3.如果前面的函数有出错的，.catch的作用是捕捉前一个函数的错误,并将错误打印出来，供编码者观看。</p><p><img src="D:%5Cblog%5Cccit18081430212Blog%5Csource%5Cccit18081430212%5CQQ%E5%9B%BE%E7%89%8720200622073852.png" alt=""></p><p>4.对于写特性，我们将看到写入特征值与读取特征值是很相似的。我们将编写一个值到LED矩阵中，在BBC开发板上控制5 x5 LED矩阵LED开启和关闭。规则如下：</p><p><img src="D:%5Cblog%5Cccit18081430212Blog%5Csource%5Cccit18081430212%5CQQ%E5%9B%BE%E7%89%8720200622073902.png" alt=""></p><p>为了简单起见，我们将让代码生成一个范围为0到31的随机值就是通过函数math.random():0~31，math.floor(x):返回小于等于x的最大整数。当我们将它写入BBC micro:bit时，每当我们点击网页上的按钮时，LED矩阵就会显示一个随机的图案。led_array[1] = 1; led_array[2] = 2;…..这些值是写入的特定值，您可以控制这些值，选择权在你。</p><p><img src="D:%5Cblog%5Cccit18081430212Blog%5Csource%5Cccit18081430212%5CQQ%E5%9B%BE%E7%89%8720200622073856.png" alt=""></p><p>5.在使用这些函数时，我们需要点击网页上Randomise LEDs，Read Model Number按钮，来调用这些函数。</p><p><img src="D:%5Cblog%5Cccit18081430212Blog%5Csource%5Cccit18081430212%5CQQ%E5%9B%BE%E7%89%8720200622073859.png" alt=""></p><p>6.程序编辑好后打开，在浏览器中按F12，观察。</p><p><img src="D:%5Cblog%5Cccit18081430212Blog%5Csource%5Cccit18081430212%5CQQ%E5%9B%BE%E7%89%8720200622073905.png" alt=""></p><p>实验现象：</p><p>1.表示连接成功。</p><p><img src="D:%5Cblog%5Cccit18081430212Blog%5Csource%5Cccit18081430212%5CQQ%E5%9B%BE%E7%89%8720200622073909.png" alt=""></p><p>2.通过点击Randomise LEDs,来改变LED灯的亮灭。</p><p><img src="D:%5Cblog%5Cccit18081430212Blog%5Csource%5Cccit18081430212%5CQQ%E5%9B%BE%E7%89%8720200622073912.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> 开发板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务特性</title>
      <link href="/2020/06/19/title-1/"/>
      <url>/2020/06/19/title-1/</url>
      
        <content type="html"><![CDATA[<h3 id="Step1-发现服务和特性"><a href="#Step1-发现服务和特性" class="headerlink" title="Step1:发现服务和特性"></a>Step1:发现服务和特性</h3><p>1.大家在我的 BBC MicroBit蓝牙设备系列（一）中从<a href="https://makecode.microbit.org/v0/89975-20684-84568-20127" target="_blank" rel="noopener">https://makecode.microbit.org/v0/89975-20684-84568-20127</a> 下载固件到BBC Micro:bit开发板时，会发现，我们的这个BBC MicroBit开发板板服务在程序设计时已经包含了蓝牙加速计服务和蓝牙led服务。</p><p><img src="/ccit18081430212/06.18.2.png" alt=""></p><p>2.大家可以打开Chrome自带的蓝牙工具chrome://bluetooth-internals/#adapter进行蓝牙连接，怎样连接在系列（一）可自行观看，连接成功后通过开发商提供的资料链接<a href="https://lancaster-university.github.io/microbit-docs/resources/bluetooth/bluetooth_profile.html" target="_blank" rel="noopener">https://lancaster-university.github.io/microbit-docs/resources/bluetooth/bluetooth_profile.html</a> ，这里都是关于开发板的服务和特性的UUID号，每个服务都对应的UUID号，连接成功后，我们可以看到，当相对应的服务UUID号一致则说明你的服务已添加成功。</p><p><img src="/ccit18081430212/06.18.3.png" alt=""></p><p><img src="/ccit18081430212/06.16.4.png" alt=""></p><p><img src="/ccit18081430212/06.18.6.png" alt=""></p><p><img src="/ccit18081430212/06.18.7.png" alt=""></p><h3 id="Step2：如何给BBC-Microbit开发板添加服务"><a href="#Step2：如何给BBC-Microbit开发板添加服务" class="headerlink" title="Step2：如何给BBC Microbit开发板添加服务"></a>Step2：如何给BBC Microbit开发板添加服务</h3><p>1.在蓝牙连接的状态下，打开<a href="https://makecode.microbit.org/v0/89975-20684-84568-20127" target="_blank" rel="noopener">https://makecode.microbit.org/v0/89975-20684-84568-20127</a> 进行在线源码编辑：</p><p><img src="/ccit18081430212/06.18.2.png" alt=""></p><p>搜索蓝牙，相应的蓝牙服务就出来了，这里添加的是蓝牙温度服务将方块拖到图片的位置。</p><p><img src="/ccit18081430212/06.19.2.png" alt=""></p><p><img src="/ccit18081430212/06.19.3.png" alt=""></p><p>然后保存，下载。</p><p>2.在你的此电脑&gt;下载路径下就有你下载的.hex文件，将下载的固件.hex文件移到开发板对应的MINCROBIT（G)盘中，这个时候打开Chrome自带的蓝牙工具，进行连接，连接成功后会发现服务已被添加成功。</p><p><img src="" alt="">)<img src="/ccit18081430212/QQ%E5%9B%BE%E7%89%8720200619110456.png" alt="QQ图片20200619110456"></p><h3 id="Step3：修改电脑端源码增加温度服务、特性"><a href="#Step3：修改电脑端源码增加温度服务、特性" class="headerlink" title="Step3：修改电脑端源码增加温度服务、特性"></a>Step3：修改电脑端源码增加温度服务、特性</h3><p>所要添加代码如下：</p><p><img src="/ccit18081430212/QQ%E5%9B%BE%E7%89%8720200619122216.png" alt=""></p><p><img src="/ccit18081430212/QQ%E5%9B%BE%E7%89%8720200619122223.png" alt=""></p><p><img src="/ccit18081430212/QQ%E5%9B%BE%E7%89%8720200619122227.png" alt=""></p><p><img src="/ccit18081430212/QQ%E5%9B%BE%E7%89%8720200619122230.png" alt=""></p><p><img src="/ccit18081430212/QQ%E5%9B%BE%E7%89%8720200619122234.png" alt=""></p><p><img src="/ccit18081430212/QQ%E5%9B%BE%E7%89%8720200619122239.png" alt=""></p><p><img src="/ccit18081430212/QQ%E5%9B%BE%E7%89%8720200619122244.png" alt=""></p><h3 id="Step4：代码解析"><a href="#Step4：代码解析" class="headerlink" title="Step4：代码解析"></a>Step4：代码解析</h3><p>1.开头添加的标志变量has_accelerometer_service，has_led_service，has_device_information_service，has_temperature_serivce，用于核对BBC MicroBit有没有相应的服务，有true无false。而has_accelerometer_data ，has_led_matrix_state，has_model_name_string，has_temperature 用于核对特性是否存在。service UUIDs 和 characteristic UUIDs用于核对板子的特性和服务来进行连接。led_matrix_state，model_number_string，accelerometer_data，temperature，这些都是定义特性相应的变量。service_count，characteristic_count服务和特性发现的数量。services_discovered，characteristics_discovered应该被发现服务和特性的数量</p><p>2.这里要添加service UUID和characteristic UUID号，用来进行与开发板中服务UUID号进行核对。</p><p><img src="/ccit18081430212/QQ%E5%9B%BE%E7%89%8720200619111018.png" alt=""></p><p>3.函数function discoverSvcsAndChars()是用来发现开发板的服务和特性，使用该函数connected_server.getPrimaryServices()获取BBC MicroBit板子上的主要服务。</p><p><img src="/ccit18081430212/QQ%E5%9B%BE%E7%89%8720200619111043.png" alt=""></p><p>4.service_count = services.length是表示发现BBC MicroBit板服务的个数，并将发现的服务打印出来。</p><p><img src="/ccit18081430212/QQ%E5%9B%BE%E7%89%8720200619111046.png" alt=""></p><p>5.接下来我们要对已发现的服务通过if函数进行判断，核对是否一致。完成后要将一致的uuid号打印输出，然后 函数service.getCharacteristics()要获取该服务下的所有特性，对该特性通过if语句判断进行核对。</p><p><img src="/ccit18081430212/QQ%E5%9B%BE%E7%89%8720200619111055.png" alt=""></p><p>6.最后要把要发现的服务和特性数量与已发现的服务和特性数量进行核对。如果一致则成功，将打印FINISHED DISCOVERY。</p><p><img src="/ccit18081430212/QQ%E5%9B%BE%E7%89%8720200619111100.png" alt=""></p><p>7.在信息核对一致成功后，我们要把setDiscoveryStatus(true)状态true通过函数function setDiscoveryStatus(status) 显示出来，表示添加服务及其特性成功了，这样就结束啦！</p><p><img src="/ccit18081430212/QQ%E5%9B%BE%E7%89%8720200619111104.png" alt=""></p><p>8.程序编辑好后打开，在浏览器中按F12，观察。</p><p><img src="/ccit18081430212/QQ%E5%9B%BE%E7%89%8720200619111107.png" alt=""></p><p>实验现象：</p><p><img src="/ccit18081430212/QQ%E5%9B%BE%E7%89%8720200619123423.png" alt=""></p><h3 id="Step5：资源"><a href="#Step5：资源" class="headerlink" title="Step5：资源"></a>Step5：资源</h3><p>1.有关microbit开发板各服务、特性的教程式参考资源： <a href="https://lancaster-university.github.io/microbit-docs/ble/profile/" target="_blank" rel="noopener">https://lancaster-university.github.io/microbit-docs/ble/profile/</a></p><p> 2.服务、特性的UUID请见： <a href="https://lancaster-university.github.io/microbit-docs/resources/bluetooth/bluetooth_profile.html" target="_blank" rel="noopener">https://lancaster-university.github.io/microbit-docs/resources/bluetooth/bluetooth_profile.html</a> 3.Chrome浏览器的插件，使用它可以查看周边蓝牙设备的信息：状态、服务、特性、描述符等。 chrome://bluetooth-internals/#adapter </p><p>4.BBC MicroBit开发板网页编辑器 <a href="https://makecode.microbit.org/#editor" target="_blank" rel="noopener">https://makecode.microbit.org/#editor</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> BBC开发板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设备连接</title>
      <link href="/2020/06/16/title/"/>
      <url>/2020/06/16/title/</url>
      
        <content type="html"><![CDATA[<h1 id="设备连接"><a href="#设备连接" class="headerlink" title="设备连接"></a>设备连接</h1><p>Micro:bit是由英国BBC公司推出的一款手持式可编程的微型计算机，可用于各种很新潮的创新，从机器人到乐器 – 无止尽，从小学到大学，非常容易开始，拥有无限可能性！一块BBC小板子上有温度传感器和光线传感器，运动传感器（加速度和指南针），2个可编程按钮，25颗独立可编程的LED，无线通讯，通过无线电和蓝牙等常用设备，无需安装任何软件， 你可以通过任意一个网页浏览器在 Blocks、 Javascript、Python、Scratch等编辑器上编写代码。费用比绝大多数玩具低——值得你入坑。</p><p>在这里简绍连接Micro:bit蓝牙设备的两种方法。</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>本机使用windows 10系统，进行操作。</p><h5 id="step2：下载固件到开发板"><a href="#step2：下载固件到开发板" class="headerlink" title="step2：下载固件到开发板"></a>step2：下载固件到开发板</h5><p>如果microbit开发板想和我们的电脑通过蓝牙进行无线通信，我们就需要启动板子的蓝牙设备功能，因此要下载固件到开发板中进行激活。 <a href="https://makecode.microbit.org/v0/89975-20684-84568-20127" target="_blank" rel="noopener">https://makecode.microbit.org/v0/89975-20684-84568-20127</a> 打开上面链接下载固件，然后用USB线连接开发板和电脑，将下载的固件移到开发板对应的MINCROBIT（G)盘中，这个时候会发现板子上黄色小灯不停闪烁，这说明在下载中，然后板子中LED小灯会显出Hi！,这就说明下载成功。</p><p><img src="/ccit18081430212/06.16.13.jpg" alt=""></p><h5 id="step3：使用谷歌浏览器工具"><a href="#step3：使用谷歌浏览器工具" class="headerlink" title="step3：使用谷歌浏览器工具"></a>step3：使用谷歌浏览器工具</h5><p>打开Chrome浏览器输入以下网址：chrome://bluetooth-internals/#adapter 找到对应的板子蓝牙（BBC micro:bit）进行连接。</p><p><img src="/ccit18081430212/06.16.4.png" alt=""></p><p>然后点击inspect,就会出现</p><p><img src="/ccit18081430212/06.16.5.png" alt=""></p><p>板子出现以上结果显示C表示设备连接成功。</p><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>在方法一中step1和step2的基础上，进行程序编写，也可实现BBC micro:bit蓝牙设备连接，在这里编辑器我用的是Adobe Dreamweaver和Notepad++，这两个软件都可下载安装。程序内容如下：</p><p><img src="/ccit18081430212/06.16.6.png" alt=""></p><p><img src="/ccit18081430212/06.16.7.png" alt=""></p><p><img src="/ccit18081430212/06.161.png" alt=""></p><p>程序编写使用Html和JavaScript，文件格式是.html然后用浏览器本地打开即可。</p><p><img src="/ccit18081430212/06.16.9.png" alt=""></p><p><img src="/ccit18081430212/06.16.10.png" alt=""></p><p><img src="/ccit18081430212/06.16.11.png" alt=""></p><p><img src="/ccit18081430212/06.16.14.png" alt=""></p><p> 这样及连接成功。现象也是在开发板上显示C</p><p><img src="/ccit18081430212/06.16.13.jpg" alt=""></p><h1 id="断开连接设备"><a href="#断开连接设备" class="headerlink" title="断开连接设备"></a>断开连接设备</h1><p>断开连接的实现，可以直接在连接功能中实现，可以在刚才的代码中进行编写，</p><p>我在前面写断开连接的代码</p><p><img src="/ccit18081430212/06.17%E3%80%821.png" alt=""></p><p>就是从第四节课开始以下就是断开连接代码，同时也在原有的代码改一下</p><p>这就是添改的代码</p><p><img src="/ccit18081430212/06.17.10.png" alt=""></p><p><img src="/ccit18081430212/06.17.12.png" alt=""></p><p><img src="/ccit18081430212/06.17.13.png" alt=""></p><p>修改完毕看一下结果。</p><p>点击连接</p><p><img src="/ccit18081430212/06.17.2.png" alt=""></p><p>会出现C。</p><p><img src="/ccit18081430212/06.16.8.jpg" alt=""></p><p>如果断开连接，</p><p><img src="/ccit18081430212/06.17.5.png" alt=""></p><p>会出现D。</p><p><img src="/ccit18081430212/06.16.9.jpg" alt=""></p><p>完成。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 开发板介绍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客心得</title>
      <link href="/2020/05/27/%E5%8D%9A%E5%AE%A2%E5%BF%83%E5%BE%97/"/>
      <url>/2020/05/27/%E5%8D%9A%E5%AE%A2%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<hr><p>title: 博客<br>date: 2020-05-27 19:28:43<br>tags:<br>—Hexo（官方网站）是一个快速、简洁且高效的博客框架，使用 Markdown 解析文章，在几秒内，即可利用靓丽的主题生成静态网页，并且它拥有非常丰富的主题模板和插件，最重要的是，Hexo 可以部署到 Github 等代码托管平台上，加上这些平台提供的免费 Page 服务，不用花一分钱就可以拥有一个好看易用的个人博客，何乐而不为呢！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo主题与Gitalk</title>
      <link href="/2020/05/23/Hexo%E4%B8%BB%E9%A2%98%E4%B8%8EGitalk/"/>
      <url>/2020/05/23/Hexo%E4%B8%BB%E9%A2%98%E4%B8%8EGitalk/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo主题配置"><a href="#Hexo主题配置" class="headerlink" title="Hexo主题配置"></a>Hexo主题配置</h1><p>一、我们现在的博客是初始化的主题，所以我们要给Hexo换上新装。Hexo主题在官网有很多，大家可以登录查看<a href="https://hexo.io/themes/" target="_blank" rel="noopener">官网链接</a>。</p><p>有自己中意的主题以后，前往作者的Github,点击：“clone or download”，把文件夹下载到自己所创建的博客“<strong>themes</strong>”文件中。</p><p><img src="/ccit18081430212/QQ%E6%88%AA%E5%9B%BE20200409105219.png" alt=""></p><p>二、进入自己所创建的博客文件夹中，找到“_config.yml“文件，在这里我推荐大家<strong>“Typora”</strong>软件打开这个文件，以及后期的博文，我都推荐大家使用<strong>“Tpyora”</strong>。</p><p>利用查找功能找到：Themes的主题配置。将主题Themes改成：自己所下载的主题名称。</p><p><img src="/ccit18081430212/QQ%E6%88%AA%E5%9B%BE20200409105359.png" alt=""></p><h1 id="Gitalk开启评论功能"><a href="#Gitalk开启评论功能" class="headerlink" title="Gitalk开启评论功能"></a>Gitalk开启评论功能</h1><p>一、新建仓库</p><p>点击<strong><em>你的用户名\</em></strong>，定位到github用户主页，新建一个仓库</p><p><img src="/ccit18081430212/QQ%E6%88%AA%E5%9B%BE20200409110130.png" alt=""></p><p>点击<strong><em>New\</em></strong>之后，你应该看到</p><p><img src="/ccit18081430212/QQ%E6%88%AA%E5%9B%BE20200417103205.png" alt=""></p><p>二、注册应用</p><p>Gitalk评论插件的授权机制依赖于<code>OAuth Application</code>，故使用Gitalk之前注册新应用。<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">注册链接</a></p><ul><li>点击<strong><em>注册链接\</em></strong>之后，你应该看到</li></ul><p><img src="/ccit18081430212/QQ%E6%88%AA%E5%9B%BE20200417103205.png" alt=""></p><p>点击<strong><em>Register application\</em></strong>之后，你应该看到</p><p><img src="/ccit18081430212/QQ%E6%88%AA%E5%9B%BE20200417111025.png" alt=""></p><p>请复制、保留<code>Client ID</code>和<code>Client Secret</code>的值（相应字段下方的字符串。<del>此处Teach-ple应用我已删除</del>）</p><p>三、主题配置</p><p>现在，请打开主题目录下的<code>_config.yml</code>文件，配置Gitalk评论插件的参数</p><p>四、本地测试</p><p>hexo g<br>hexo s</p><p><code>hexo s</code>本地测试以检查参数是否设置错误，<code>hexo d</code>部署以正常使用。（第一次使用，请登陆初始化）</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo上传至Github</title>
      <link href="/2020/05/23/Hexo%E4%B8%8A%E4%BC%A0%E8%87%B3Github/"/>
      <url>/2020/05/23/Hexo%E4%B8%8A%E4%BC%A0%E8%87%B3Github/</url>
      
        <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>我们要将自己的博客上传至Github,首先我们需要将去注册我们GIithub账户。</p><ol><li><a href="https://github.com/" target="_blank" rel="noopener">注册Github</a>：右上角的<code>sign in</code>是登录，<code>sign up</code>是注册。</li><li><strong>新建仓库(Repository)</strong>:点击<code>create repository</code>按钮。</li><li>查看仓库配置：点击仓库右上角的<code>Settings</code>选项。</li><li>获取本机当前用户的SSH公钥：首先查看在本机的当前用户(操作系统的登录账户)目录下是否已经存在ssh公钥。<code>~</code>表示当前用户的家目录。</li></ol><p><strong>SSH公钥是是将Hexo关键所在，<a href="https://www.bilibili.com/video/BV1cW411A7Jx?p=4" target="_blank" rel="noopener">Github SSH公钥具体配置方法</a></strong></p><h1 id="绑定Hexo和Github"><a href="#绑定Hexo和Github" class="headerlink" title="绑定Hexo和Github"></a>绑定Hexo和Github</h1><p><strong>1.修改本地站点配置文件</strong>: 打开站点目录（<code>blog\</code>）下的<code>_config.yml</code>文件，将最后一部分修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:  </span><br><span class="line">          type:  git</span><br><span class="line">          repo:  git@github.com:username&#x2F;username.github.io.git</span><br><span class="line">          branch:  master</span><br></pre></td></tr></table></figure><p><strong>2.安装关联hexo和git的工具</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git –save</span><br></pre></td></tr></table></figure><p>如果最后可以看到这个工具的版本号，则表明安装成功。</p><h1 id="Hexo升天"><a href="#Hexo升天" class="headerlink" title="Hexo升天"></a>Hexo升天</h1><p><strong>部署Hexo</strong>：执行以下命令:hexo d</p><p>这个命令会将本地博客根目录（<code>blog\</code>）下<code>public</code>文件夹里的所有文件上传至Github上的<code>username/username.github.io.git</code>这个仓库。</p><p><strong>2.博客预览</strong>：在浏览器中输入<code>https://username.github.io</code>,如果看到新页面则大功告成.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo本地搭建</title>
      <link href="/2020/05/19/Hexo%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/05/19/Hexo%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>本博主第一篇文章，主要介绍：为何使用hexo。如何进行hexo本地的搭建以及遇到的问题，解决方案。</p><h1 id="为何使用Hexo"><a href="#为何使用Hexo" class="headerlink" title="为何使用Hexo"></a>为何使用Hexo</h1><p>目前网络有形形色色的博客，我们在这些平台的注册博客，发表文章，如果后来平台消失，我们发表的宝贵文章，也随之消失。</p><p>我也将会在hexo 中记录自己学习心得，作为自己的“北大荒”。</p><h1 id="Hexo本地搭建"><a href="#Hexo本地搭建" class="headerlink" title="Hexo本地搭建"></a>Hexo本地搭建</h1><h2 id="环境的搭建"><a href="#环境的搭建" class="headerlink" title="环境的搭建"></a>环境的搭建</h2><p>事物的运行都需要一个环境，所以要想让hexo运行就需要为其搭建一个环境。</p><p>Node.js,和Git是hexo环境搭建的主要的软件。</p><p>一、安装<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a>去官网选择最新的版本，安装完成后在CMD指令窗口输入指令：”<strong><em>node -v</em></strong>“。</p><p> 等待电脑给出 Node 的版本号，如若给出则安装成功。</p><p>二、安装Git</p><p> 安装  <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a>,完成后在CMD窗口输入“<strong>Git</strong>”指令。</p><p>如若出现上图，则表示Git安装成功。</p><h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><p>环境搭建完成后，我们就要进行Hexo的安装。</p><p>在CMD窗口输入“<strong>npm install hexo-cli -g</strong>”。进行安装。</p><p>安装完成后如果可以看到hexo-cli的版本号，则表示安装成功。</p><p>上图可以看到Hexo的版本号，代表已经安装成功。</p><h2 id="本地博客的创建"><a href="#本地博客的创建" class="headerlink" title="本地博客的创建"></a>本地博客的创建</h2><p>所有准备工作完成后，我们就要进行本地博客的创建。</p><p>一、首先在CMD指令窗口输入：<strong>md blog</strong>  ，这个指令是创建一个名为”blog”的文件夹。建议将此文件夹创建在其余盘中。</p><p>二、初始化博客：分别在CMD中依次输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd blog</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>若实验结果出现“Start blogging with Hexo!”字符串，则表示初始化成功且可以开始写博客了。<strong>注意：在初始化Hexo博客之前，必须保证根目录为空,否则无法成功初始化。</strong></p><p>如若出现上图则表示博客创建成功。</p><p>三、本地博客预览</p><p>在CMD窗口输入指令：”<strong>hexo s</strong>“</p><p>若结果发现有”Hexo is running at <code>http://localhost:4000/</code>字符串，则表示启动成功，Hexo当前就运行在上述网址。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/03/15/hello-world/"/>
      <url>/2020/03/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="hello"><a href="#hello" class="headerlink" title="hello"></a>hello</h2><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
